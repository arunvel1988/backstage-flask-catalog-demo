name: arun

on:
  push:
    branches:
      - dev
      - stg
      - main
  pull_request:
    branches:
      - dev
      - stg
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Python (optional for lint/tests)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    #- name: Lint code
     #   run: |
      #    pip install flake8
       #   flake8 .

      # 3. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build & Push Docker image
      - name: Build and Push Docker image
        run: |
          IMAGE_NAME=arunvel1988/backstage-demo
          BRANCH_NAME=${GITHUB_REF##*/}
          TAG=${BRANCH_NAME}-${GITHUB_SHA::7}
          echo "Building image: $IMAGE_NAME:$TAG"
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG
          echo "IMAGE=$IMAGE_NAME:$TAG" >> $GITHUB_ENV

      # 5. Set namespace depending on branch
      - name: Set namespace
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "NAMESPACE=dev" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "stg" ]]; then
            echo "NAMESPACE=stg" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "NAMESPACE=prod" >> $GITHUB_ENV
          fi

      # 6. Setup kubectl
      - name: Set up Kubeconfig
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      # 7. Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          cat <<EOF | kubectl apply -n $NAMESPACE -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: backstage-demo
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: backstage-demo
            template:
              metadata:
                labels:
                  app: backstage-demo
              spec:
                containers:
                  - name: backstage-demo
                    image: $IMAGE
                    ports:
                      - containerPort: 5000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: backstage-demo
          spec:
            selector:
              app: backstage-demo
            ports:
              - port: 80
                targetPort: 5000
                protocol: TCP
            type: ClusterIP
          EOF
